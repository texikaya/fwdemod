from datetime import datetime
import json
import requests
from threading import Thread
import frequency_tables
import logging
import crccheck
from collections.abc import Mapping
logger = logging.getLogger(__name__)


# Byte info1 seems to map to the network ID.
# This table is the mapping.  There is probably a function
# here but it's not worth figuring it out.

#listede verilen 16 farklı bölgeyle eşleşme sağlıyor 
info1_to_net_id = {0x67: 0, 0x60: 1, 0x61: 2, 0x62: 3, 0x63: 4, 0x64: 5, 0x65: 6, 0x5e: 7,
                   0x5d: 8, 0x6a: 9, 0x6b: 0xa, 0x6c: 0xb, 0x6d: 0xc, 0x6e: 0xd, 0x6f: 0xe, 0x5f: 0xf}

otp1 = [0x00, 0x82, 0x5b, 0x68, 0x0a, 0xda, 0x07, 0x28,
        0x94, 0xe9, 0x9f, 0x22, 0xd6, 0xfe, 0xe3, 0x67,
        0x83, 0x1b, 0xc5, 0x03, 0x5d, 0x90, 0x88, 0xee,
        0x50, 0xfd, 0xa8, 0x11, 0x24, 0x9e, 0xdc, 0x7c,
        0x06, 0x8f, 0x19, 0x71, 0x0e, 0xcf, 0x93, 0xa4,
        0x98, 0xb3, 0xc7, 0xbb, 0xeb, 0x62, 0xfa, 0xc0,
        0xed, 0xc2, 0x86, 0x02, 0xa7, 0xf6, 0x80, 0xa9,
        0x35, 0x13, 0xb6, 0x25, 0x97, 0x47, 0xc8, 0xb2,
        0x4c, 0xfc, 0xce, 0x8a, 0xe8, 0x7b, 0x3b, 0x74,
        0xd1, 0x1a, 0x7e, 0xb5, 0x00, 0x66, 0x95, 0x29,
        0x91, 0x8e, 0x0c, 0xaf, 0xdd, 0xdb, 0xd3, 0xde,
        0xe4, 0x41, 0x18, 0x21, 0x3e, 0xdf, 0xe1, 0xe5,
        0xca, 0x4b, 0x77, 0x27, 0x4f, 0x5f, 0xd2, 0x9c,
        0x20, 0x5a, 0x2a, 0x36, 0x1c, 0x12, 0xc9, 0x81,
        0x4d, 0x01, 0xf4, 0x99, 0x17, 0xa6, 0xf9, 0xae,
        0x75, 0xab, 0x1e, 0x26, 0xa0, 0xb8, 0x2c, 0x08,
        0x23, 0x70, 0x49, 0xa5, 0x10, 0xf0, 0xac, 0xe7,
        0x2e, 0xb7, 0x78, 0xf1, 0xd0, 0x61, 0x37, 0xe2,
        0xbc, 0xcd, 0x57, 0xa2, 0x6a, 0x3f, 0xd5, 0x6b,
        0x2d, 0xf7, 0xfb, 0xe0, 0x63, 0xc6, 0xad, 0x60,
        0xef, 0x65, 0x7d, 0xc4, 0x59, 0x04, 0x2b, 0x58,
        0xb4, 0x73, 0x44, 0x1f, 0x3d, 0x8d, 0xb9, 0x6d,
        0x2f, 0xd4, 0x09, 0x4e, 0xf5, 0xba, 0xa3, 0x0b,
        0xbe, 0x40, 0x7a, 0x5e, 0x96, 0x52, 0x5c, 0x7f,
        0x39, 0x38, 0x4a, 0x45, 0x85, 0x54, 0x31, 0x33,
        0x0d, 0x9d, 0x8b, 0x14, 0x46, 0x51, 0x05, 0x53,
        0xb0, 0x0f, 0xbf, 0x3c, 0x92, 0x1d, 0xec, 0xcb,
        0x6e, 0x3a, 0xc3, 0xd9, 0xff, 0xbd, 0x76, 0x43,
        0x32, 0x34, 0x30, 0xea, 0x6f, 0x69, 0x9b, 0x56,
        0x55, 0xd7, 0x16, 0xb1, 0x6c, 0x64, 0x48, 0x72,
        0x87, 0x79, 0xd8, 0xaa, 0x89, 0xc1, 0x84, 0xf8,
        0x42, 0xcc, 0xa1, 0xf3, 0x8c, 0x15, 0x9a, 0xf2,
        0xfa, 0x93, 0xc0, 0x80, 0x59, 0x31, 0x2d, 0x32,
        0xc8, 0xcb, 0xa2, 0x50, 0x02, 0x89, 0x19, 0xed,
        0xdf, 0xdc, 0x2e, 0x7a, 0x64, 0x72, 0x34, 0x4a,
        0xf8, 0x3d, 0x6f, 0xe5, 0x85, 0x56, 0xab, 0x67,
        0x38, 0xb1, 0x4f, 0xb5, 0xbe, 0x8f, 0x97, 0xd8,
        0x87, 0x00, 0xa3, 0xec, 0x78, 0xa6, 0xc9, 0xb0,
        0x1e, 0x3e, 0x39, 0xcf, 0x04, 0xa0, 0x84, 0x61,
        0xd2, 0xac, 0xeb, 0x2b, 0x42, 0xe4, 0xd3, 0xf2,
        0x60, 0x2f, 0x10, 0xbd, 0x8e, 0xa8, 0x65, 0xf6,
        0x98, 0x0b, 0x1b, 0x11, 0x54, 0x4c, 0x71, 0x2c,
        0x75, 0x94, 0xa7, 0xef, 0x49, 0x69, 0x77, 0x68,
        0x51, 0x6d, 0x12, 0xb4, 0x28, 0x9c, 0x0a, 0xb8,
        0x66, 0xc2, 0x76, 0x53, 0xcc, 0x2a, 0x30, 0x1c,
        0xa4, 0xce, 0x8d, 0x5a, 0x23, 0xb2, 0xc5, 0x99,
        0x1a, 0x35, 0x8b, 0xfe, 0xfc, 0x08, 0x03, 0x95,
        0x55, 0x29, 0x44, 0x43, 0x25, 0xfb, 0xe3, 0xe0,
        0x13, 0x05, 0x92, 0x7e, 0x22, 0x0d, 0x8a, 0xe7,
        0x26, 0xaa, 0xc4, 0x36, 0x15, 0xa9, 0x96, 0x09,
        0xd1, 0x06, 0x58, 0x57, 0x1d, 0xae, 0x0e, 0xb7,
        0x41, 0x9f, 0xb3, 0x21, 0xf1, 0xcd, 0x6a, 0x3a,
        0x46, 0x45, 0x81, 0x8c, 0xbf, 0x5d, 0xd0, 0xbb,
        0x3f, 0x9e, 0xde, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

otp2 = [0xe6, 0x82, 0x5b, 0x68, 0x0a, 0xda, 0x07, 0x28,
        0x94, 0xe9, 0x9f, 0x22, 0xd6, 0xfe, 0xe3, 0x67,
        0x83, 0x1b, 0xc5, 0x03, 0x5d, 0x90, 0x88, 0xee,
        0x50, 0xfd, 0xa8, 0x11, 0x24, 0x9e, 0xdc, 0x7c,
        0x06, 0x8f, 0x19, 0x71, 0x0e, 0xcf, 0x93, 0xa4,
        0x98, 0xb3, 0xc7, 0xbb, 0xeb, 0x62, 0xfa, 0xc0,
        0xed, 0xc2, 0x86, 0x02, 0xa7, 0xf6, 0x80, 0xa9,
        0x35, 0x13, 0xb6, 0x25, 0x97, 0x47, 0xc8, 0xb2,
        0x4c, 0xfc, 0xce, 0x8a, 0xe8, 0x7b, 0x3b, 0x74,
        0xd1, 0x1a, 0x7e, 0xb5, 0x00, 0x66, 0x95, 0x29,
        0x91, 0x8e, 0x0c, 0xaf, 0xdd, 0xdb, 0xd3, 0xde,
        0xe4, 0x41, 0x18, 0x21, 0x3e, 0xdf, 0xe1, 0xe5,
        0xca, 0x4b, 0x77, 0x27, 0x4f, 0x5f, 0xd2, 0x9c,
        0x20, 0x5a, 0x2a, 0x36, 0x1c, 0x12, 0xc9, 0x81,
        0x4d, 0x01, 0xf4, 0x99, 0x17, 0xa6, 0xf9, 0xae,
        0x75, 0xab, 0x1e, 0x26, 0xa0, 0xb8, 0x2c, 0x08,
        0x23, 0x70, 0x49, 0xa5, 0x10, 0xf0, 0xac, 0xe7,
        0x2e, 0xb7, 0x78, 0xf1, 0xd0, 0x61, 0x37, 0xe2,
        0xbc, 0xcd, 0x57, 0xa2, 0x6a, 0x3f, 0xd5, 0x6b,
        0x2d, 0xf7, 0xfb, 0xe0, 0x63, 0xc6, 0xad, 0x60,
        0xef, 0x65, 0x7d, 0xc4, 0x59, 0x04, 0x2b, 0x58,
        0xb4, 0x73, 0x44, 0x1f, 0x3d, 0x8d, 0xb9, 0x6d,
        0x2f, 0xd4, 0x09, 0x4e, 0xf5, 0xba, 0xa3, 0x0b,
        0xbe, 0x40, 0x7a, 0x5e, 0x96, 0x52, 0x5c, 0x7f,
        0x39, 0x38, 0x4a, 0x45, 0x85, 0x54, 0x31, 0x33,
        0x0d, 0x9d, 0x8b, 0x14, 0x46, 0x51, 0x05, 0x53,
        0xb0, 0x0f, 0xbf, 0x3c, 0x92, 0x1d, 0xec, 0xcb,
        0x6e, 0x3a, 0xc3, 0xd9, 0xff, 0xbd, 0x76, 0x43,
        0x32, 0x34, 0x30, 0xea, 0x6f, 0x69, 0x9b, 0x56,
        0x55, 0xd7, 0x16, 0xb1, 0x6c, 0x64, 0x48, 0x72,
        0x87, 0x79, 0xd8, 0xaa, 0x89, 0xc1, 0x84, 0xf8,
        0x42, 0xcc, 0xa1, 0xf3, 0x8c, 0x15, 0x9a, 0xf2,
        0xfa, 0x93, 0xc0, 0x80, 0x59, 0x31, 0x2d, 0x32,
        0xc8, 0xcb, 0xa2, 0x50, 0x02, 0x89, 0x19, 0xed,
        0xdf, 0xdc, 0x2e, 0x7a, 0x64, 0x72, 0x34, 0x4a,
        0xf8, 0x3d, 0x6f, 0xe5, 0x85, 0x56, 0xab, 0x67,
        0x38, 0xb1, 0x4f, 0xb5, 0xbe, 0x8f, 0x97, 0xd8,
        0x87, 0x00, 0xa3, 0xec, 0x78, 0xa6, 0xc9, 0xb0,
        0x1e, 0x3e, 0x39, 0xcf, 0x04, 0xa0, 0x84, 0x61,
        0xd2, 0xac, 0xeb, 0x2b, 0x42, 0xe4, 0xd3, 0xf2,
        0x60, 0x2f, 0x10, 0xbd, 0x8e, 0xa8, 0x65, 0xf6,
        0x98, 0x0b, 0x1b, 0x11, 0x54, 0x4c, 0x71, 0x2c,
        0x75, 0x94, 0xa7, 0xef, 0x49, 0x69, 0x77, 0x68,
        0x51, 0x6d, 0x12, 0xb4, 0x28, 0x9c, 0x0a, 0xb8,
        0x66, 0xc2, 0x76, 0x53, 0xcc, 0x2a, 0x30, 0x1c,
        0xa4, 0xce, 0x8d, 0x5a, 0x23, 0xb2, 0xc5, 0x99,
        0x1a, 0x35, 0x8b, 0xfe, 0xfc, 0x08, 0x03, 0x95,
        0x55, 0x29, 0x44, 0x43, 0x25, 0xfb, 0xe3, 0xe0,
        0x13, 0x05, 0x92, 0x7e, 0x22, 0x0d, 0x8a, 0xe7,
        0x26, 0xaa, 0xc4, 0x36, 0x15, 0xa9, 0x96, 0x09,
        0xd1, 0x06, 0x58, 0x57, 0x1d, 0xae, 0x0e, 0xb7,
        0x41, 0x9f, 0xb3, 0x21, 0xf1, 0xcd, 0x6a, 0x3a,
        0x46, 0x45, 0x81, 0x8c, 0xbf, 0x5d, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

otp3 = [0xe6, 0x82, 0x5b, 0x68, 0x0a, 0xda, 0x07, 0x28,
        0x94, 0xe9, 0x9f, 0x22, 0xd6, 0xfe, 0xe3, 0x67,
        0x83, 0x1b, 0xc5, 0x03, 0x5d, 0x90, 0x88, 0xee,
        0x50, 0xfd, 0xa8, 0x11, 0x24, 0x9e, 0xdc, 0x7c,
        0x06, 0x8f, 0x19, 0x71, 0x0e, 0xcf, 0x93, 0xa4,
        0x98, 0xb3, 0xc7, 0xbb, 0xeb, 0x62, 0xfa, 0xc0,
        0xed, 0xc2, 0x86, 0x02, 0xa7, 0xf6, 0x80, 0xa9,
        0x35, 0x13, 0xb6, 0x25, 0x97, 0x47, 0xc8, 0xb2,
        0x4c, 0xfc, 0xce, 0x8a, 0xe8, 0x7b, 0x3b, 0x74,
        0xd1, 0x1a, 0x7e, 0xb5, 0x00, 0x66, 0x95, 0x29,
        0x91, 0x8e, 0x0c, 0xaf, 0xdd, 0xdb, 0xd3, 0xde,
        0xe4, 0x41, 0x18, 0x21, 0x3e, 0xdf, 0xe1, 0xe5,
        0xca, 0x4b, 0x77, 0x27, 0x4f, 0x5f, 0xd2, 0x9c,
        0x20, 0x5a, 0x2a, 0x36, 0x1c, 0x12, 0xc9, 0x81,
        0x4d, 0x01, 0xf4, 0x99, 0x17, 0xa6, 0xf9, 0xae,
        0x75, 0xab, 0x1e, 0x26, 0xa0, 0xb8, 0x2c, 0x08,
        0x23, 0x70, 0x49, 0xa5, 0x10, 0xf0, 0xac, 0xe7,
        0x2e, 0xb7, 0x78, 0xf1, 0xd0, 0x61, 0x37, 0xe2,
        0xbc, 0xcd, 0x57, 0xa2, 0x6a, 0x3f, 0xd5, 0x6b,
        0x2d, 0xf7, 0xfb, 0xe0, 0x63, 0xc6, 0xad, 0x60,
        0xef, 0x65, 0x7d, 0xc4, 0x59, 0x04, 0x2b, 0x58,
        0xb4, 0x73, 0x44, 0x1f, 0x3d, 0x8d, 0xb9, 0x6d,
        0x2f, 0xd4, 0x09, 0x4e, 0xf5, 0xba, 0xa3, 0x0b,
        0xbe, 0x40, 0x7a, 0x5e, 0x96, 0x52, 0x5c, 0x7f,
        0x39, 0x38, 0x4a, 0x45, 0x85, 0x54, 0x31, 0x33,
        0x0d, 0x9d, 0x8b, 0x14, 0x46, 0x51, 0x05, 0x53,
        0xb0, 0x0f, 0xbf, 0x3c, 0x92, 0x1d, 0xec, 0xcb,
        0x6e, 0x3a, 0xc3, 0xd9, 0xff, 0xbd, 0x76, 0x43,
        0x32, 0x34, 0x30, 0xea, 0x6f, 0x69, 0x9b, 0x56,
        0x55, 0xd7, 0x16, 0xb1, 0x6c, 0x64, 0x48, 0x72,
        0x87, 0x79, 0xd8, 0xaa, 0x89, 0xc1, 0x84, 0xf8,
        0x42, 0xcc, 0xa1, 0xf3, 0x8c, 0x15, 0x9a, 0xf2,
        0xfa, 0x93, 0xc0, 0x80, 0x59, 0x31, 0x2d, 0x32,
        0xc8, 0xcb, 0xa2, 0x50, 0x02, 0x89, 0x19, 0xed,
        0xdf, 0xdc, 0x2e, 0x7a, 0x64, 0x72, 0x34, 0x4a,
        0xf8, 0x3d, 0x6f, 0xe5, 0x85, 0x56, 0xab, 0x67,
        0x38, 0xb1, 0x4f, 0xb5, 0xbe, 0x8f, 0x97, 0xd8,
        0x87, 0x00, 0xa3, 0xec, 0x78, 0xa6, 0xc9, 0xb0,
        0x1e, 0x3e, 0x39, 0xcf, 0x04, 0xa0, 0x84, 0x61,
        0xd2, 0xac, 0xeb, 0x2b, 0x42, 0xe4, 0xd3, 0xf2,
        0x60, 0x2f, 0x10, 0xbd, 0x8e, 0xa8, 0x65, 0xf6,
        0x98, 0x0b, 0x1b, 0x11, 0x54, 0x4c, 0x71, 0x2c,
        0x75, 0x94, 0xa7, 0xef, 0x49, 0x69, 0x77, 0x68,
        0x51, 0x6d, 0x12, 0xb4, 0x28, 0x9c, 0x0a, 0xb8,
        0x66, 0xc2, 0x76, 0x53, 0xcc, 0x2a, 0x30, 0x1c,
        0xa4, 0xce, 0x8d, 0x5a, 0x23, 0xb2, 0xc5, 0x99,
        0x1a, 0x35, 0x8b, 0xfe, 0xfc, 0x08, 0x03, 0x95,
        0x55, 0x29, 0x44, 0x43, 0x25, 0xfb, 0xe3, 0xe0,
        0x13, 0x05, 0x92, 0x7e, 0x22, 0x0d, 0x8a, 0xe7,
        0x26, 0xaa, 0xc4, 0x36, 0x15, 0xa9, 0x96, 0x09,
        0xd1, 0x06, 0x58, 0x57, 0x1d, 0xae, 0x0e, 0xb7,
        0x41, 0x9f, 0xb3, 0x21, 0xf1, 0xcd, 0x6a, 0x3a,
        0x46, 0x45, 0x81, 0x8c, 0xbf, 0x5d, 0xd0, 0xbb,
        0x3f, 0x9e, 0xde, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]


class FWPacket(Mapping):

    def __init__(self, packet: [int], start_time: datetime, frequency: int):
        self._packet = packet
        self.dict = dict()
        self.dict["sync"] = packet[0]
        # Sometimes the SDR channel frequency doesn't quite match the FW channel frequency
        # For math reasons, use the closest from the list as the channel
        #self.dict["channel"] = min(frequency_tables.channel_frequency, key=lambda x: abs(x - frequency))
        
        #sdr frekansı bazen gerçek frekansla eşleşmiyor. lsıteden en yakın frekansı seç
        self.dict["channel"] = frequency_tables.channel_frequency.index(frequency)
        self.dict["src"] = int.from_bytes(bytearray(packet[1:4]), byteorder="big")
        self.dict["dst"] = int.from_bytes(bytearray(packet[4:7]), byteorder="big")
        self.dict["unk1"] = packet[7]  # I think this is a packet type. #bu paket türü gibi point2point 10 multipoint 128
        # 0x4 Appears to be some sort of test packet.  Syn is always 0.
        # 0x8 Appears to be some sort of beacon.  PtMP beacon maybe.
        # 0x9 Appears to EP->AP traffic.
        self.dict["syn"] = (packet[8] & 0xf0) >> 4
        self.dict["ack"] = packet[8] & 0x0f  # I think this is an "ack". # bu ack paketi gibi
        self.dict["offset"] = packet[9]
        self.dict["len"] = packet[10]

        # I think these 3 bytes vary based on 'unk1'.  Some bits a

        # Min / Max packet size..   Probably from timing.
        self.dict["info1"] = packet[11]

        # Zone setting in menu,   decoded byte
        # 1111 1111 1111 1111     Unk3:5bffff
        # 1010 1010 1010 1010     Unk3:5b5555
        # 1111 0000 1111 0000     Unk3:5b0f0f
        # 1111 1111 0000 0000     Unk3:5b00ff
        # 1000 0000 1111 1111     Unk3:5bff01
        # 0110 1100 1111 1111     Unk3:octobff36
        #                              5b is followed by zones
        if self.dict["info1"] == 0x5b: #5b den sonra her zaman zone bilgisi veriyor
            self.dict["zone_bytes_int"] = int.from_bytes(bytearray(packet[12:14]), byteorder="big")
            # self.dict["zone_int"] = int(bin(self.dict["zone_bytes_int"])[:1:-1], 2)
            self.dict["zone_int"] = int('{:016b}'.format(self.dict["zone_bytes_int"])[::-1], 2)
            # self.dict["zone_mask"] = bin(int.from_bytes(bytearray(packet[12:14]), byteorder="big")).strip('0b')
            # self.dict["zone_mask"] = bin(self.dict["zone_int"]).strip('0b')

        # Point to Multipoint master, Unk3 flips between 5bffff and 6e05f5
        # Looking at 6e05f5 packet, change all radio and multipoint params
        # Freq Key appears to change last nibble
        # Changing Subnet ID changes 2nd to last nibble, 0-0 and F-F both show 0 in nibble, x-y shows y in nibble
        #
        # Unk3:6e05f5 - freq key 5, network id 3333 D05,
        #     6e   5 is Freq key
        #         f  is Xmit Subnet ID 0 = F
        #       05   is bottom byte of network ID
        # Unk3:63d20a - freq key A, network id 1234 4D2,
        # Unk3:67000a - freq key A, network id 0 000,
        # 0110 0111 0000 0000 0000 1010
        # Unk3:5fff0a - freq key A, network id 4095 FFF,
        # 0101 1111 1111 1111 0000 1010
        # Unk3:63000a - freq key A, network id 1024 400,
        # 0110 0011 0000 0000 0000 1010
        # Unk3:5d000a - freq key A, network id 2048 800,
        # 0101 1101 0000 0000 0000 1010
        # All following are freq key A, only changing network id
        # Unk3:67000a - network id    0 000
        # Unk3:60000a - network id  256 100
        # Unk3:61000a - network id  512 200
        # Unk3:62000a - network id  768 300
        # Unk3:63000a - network id 1024 400
        # Unk3:64000a - network id 1280 500
        # Unk3:65000a - network id 1536 600
        # Unk3:5e000a - network id 1792 700
        # Unk3:5d000a - network id 2048 800
        # Unk3:6a000a - network id 2304 900
        # Unk3:6b000a - network id 2560 A00
        # Unk3:6c000a - network id 2816 B00
        # Unk3:6d000a - network id 3072 C00
        # Unk3:6e000a - network id 3328 D00
        # Unk3:6f000a - network id 3584 E00
        # Unk3:5f000a - network id 3840 F00
        # Unk3:5f010a - network id 3841 F01
        # Unk3:6815.. - doesn't the last for digits doesnt stay constant

        if self.dict["info1"] in info1_to_net_id: # bu listeyele eşleşme ara
            self.dict["net_id"] = (info1_to_net_id[self.dict["info1"]] << 8) | packet[12]
            self.dict["subnet_id"] = (packet[13] >> 4) & 0xf
            self.dict["frequency_key"] = packet[13] & 0xf

        self.dict["unk3"] = int.from_bytes(bytearray(packet[11:14]), byteorder="big")

        self.dict["crc"] = int.from_bytes(bytearray(packet[14:16]), byteorder="big")

        if self.dict['len'] > 0:
            self.dict["payload"] = packet[16:16 + self.dict["len"]]
            self.dict["dehashed"] = [b ^ otp3[(self.dict["syn"] *
                                               16 +
                                               self.dict["ack"] +
                                               self.dict["offset"]) %
                                              256 +
                                              i] for (i, b) in enumerate(self.dict["payload"])]
            self.dict["dehashed_crc_calc"] = int.from_bytes(crccheck.crc.Crc16Arc().process(
                self.dict['dehashed'][:-2]).finalbytes(), byteorder="little")
            self.dict["dehashed_crc"] = int.from_bytes(bytearray(self.dict['dehashed'][-2:]), byteorder="big")

        self._json = None
        self.dict["start_time"] = start_time
        self.dict["frequency"] = frequency

    def __getitem__(self, key):
        return self.dict[key]

    def __len__(self):
        return len(self.dict)

    def __iter__(self):
        return self.dict.__iter__()

    @property
    def json_data(self) -> str:
        retval = {
            "source": self.dict["src"],
            "destination": self.dict["dst"],
            "data": str(self)
        }
        if "start_time" in self.dict:
            retval["start_time"] = self.dict["start_time"]
        return json.dumps(retval, default=str)

    def __str__(self):
        ret = ""

        ret += f"Freq:{self.dict['frequency']}({self.dict['channel']})"

        ret += f" Time:{self.dict['start_time']}"

        ret += f"\nSync:{self.dict['sync']:2x}"

        ret += f" Src:{self.dict['src']:6x}({int(self.dict['src'] / 10000):03d}-{self.dict['src'] % 10000:04d})"

        ret += f" Dst:{self.dict['dst']:6x}"

        if self.dict['dst'] != 0xffffff:
            ret += f"({int(self.dict['dst'] / 10000):03d}-{self.dict['dst'] % 10000:04d})"

        ret += f" Unk1:{self.dict['unk1']}"

        ret += f" Syn:{self.dict['syn']}"

        ret += f" Ack:{self.dict['ack']}"

        ret += f" Offset:{self.dict['offset']}"

        ret += f" Len:{self.dict['len']}"

        if self.dict['info1'] == 0x5b:
            ret += f" Zones:{self.dict['zone_int']:016b}"
        elif self.dict['info1'] in info1_to_net_id:
            ret += f" NetID:{self.dict['net_id']:04d}"
            ret += f" SubNetID:{self.dict['subnet_id']:02x}"
            ret += f" FrequencyKey:{self.dict['frequency_key']:02x}"
        else:
            pass
        ret += f" Unk3:{self.dict['unk3']:6x}"

        ret += f" CRC:{self.dict['crc']:4x}"

        if self.dict['len'] > 0:
            # ret += "\nPayload:" + " ".join(["{:02x}".format(i) for i in self.dict['payload']])
            # https://crccalc.com

            payload_crc = crccheck.crc.Crc16Arc().process(self.dict['dehashed'][:-2]).finalbytes()
            ret += f"\nCrc:{self.dict['dehashed_crc_calc']:4x} {self.dict['dehashed_crc']:4x}"

            ret += "\nDehashed:" + " ".join(["{:02x}".format(i) for i in self.dict['dehashed']])

        return ret

    def send_to_django(self, hostname: str = "http://127.0.0.1:8000/", use_thread=False):

        def send_data(this, hostname):
            response = requests.post(
                url=f"{hostname}api/packets/",
                data=this.json_data,
                headers={'Content-Type': 'application/json'}
            )
            if not response.ok:
                logger.error("Error publishing data: %s", response.reason)

        if use_thread:
            Thread(target=send_data, args=(self, hostname)).start()
        else:
            send_data(self, hostname)
